buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/haunted-soft/maven' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
        classpath 'com.haunted.gradle-plugins:save-ssd:+@jar'
    }
}
apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'save-ssd' // README at https://github.com/populov/gradle-save-ssd-plugin
apply plugin: 'signing'

repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/populov/maven' }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    release {
        runProguard false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
}

dependencies {
    compile 'com.intellij:annotations:+@jar'
    compile 'com.seppius.plurals:android-i18n-plurals:1.+@aar'
}

// Publish to maven repository

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }

    def classesJar = project.tasks.create "jar${name.capitalize()}", Jar
    classesJar.dependsOn variant.javaCompile
    classesJar.from fileTree(dir: variant.javaCompile.destinationDir).matching { include 'com/haunted/legacygovernor/**' }
    artifacts.add('archives', classesJar);

    def sourcesJar = project.tasks.create "sources${name.capitalize()}", Jar
    sourcesJar.classifier 'sources'
    sourcesJar.from android.sourceSets.main.allSource
    artifacts.add('archives', sourcesJar);
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://$buildDir/mvnRepo/")
/*
            repository(url: "${bintray_api_base_url}/maven/${bintray_org}/${bintray_repo}/${bintray_package}") {
                authentication(userName: bintray_username, password: bintray_api_key)
            }
*/
            pom.project {
                artifactId 'LegacyGovernor'
                name 'LegacyGovernor'
                packaging 'jar'
                description 'Forget about if (SDK_INT >= ...) ... else ...'
                url 'http://github.com/populov/Android-LegacyGovernor'
                inceptionYear 2013

                scm {
                    url 'git@github.com:populov/Android-LegacyGovernor.git'
                    connection 'scm:git:git@github.com:populov/Android-LegacyGovernor.git'
                    developerConnection 'scm:git:git@github.com:populov/Android-LegacyGovernor.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'Populov'
                        name 'Serge Populov'
                        email 'serge@populov.com'
                    }
                }
            }

            beforeDeployment {
                MavenDeployment deployment -> if (canSign())
                    signing.signPom(deployment)
            }
        }
    }
}

boolean canSign() {
    return project.hasProperty("signing.secretKeyRingFile") &&
           project.hasProperty("signing.keyId")
}

signing {
    if (canSign())
        sign configurations.archives
}
